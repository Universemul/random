<The following is a copy of the Autograder output, with explanation notes shown enclosed in angle brackets.>

This message was sent by an automated reply program.
Please do not reply to this message.

We received the mail that you sent 
To: eecs381@eecs.umich.edu
Date: Wed, 20 Jan 2010 22:30:49 -0500

------------------------------

<The Console output tests first build your complete program, with your list implementation for Ordered_container. They then test whether your program as a whole behaves correctly by giving your program a test scenario along the same lines as the provided samples. Using redirected I/O, an input file is provided for stdin, emulating console input, and the resulting stdout output file is compared to the one produced by my version of the program. If the output matches, your program passes the test.>
Check of Console Output Correctness
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<The following three tests use the sample in/out files provided with the project. If your code matches these samples in your own testing, but fails in the autograder, it almost always means that you have relied on undefined behavior in your code, so that it behaves differently on the autograder platform than on yours. Check the pages about working with the autograder. Getting your code to pass these tests is the first thing you want to do after getting some of the Components working (see below). >
Test  0 (normal sample(list))
    standard output,   worth  1 points:  passed
Test  1 (errors sample)
    standard output,   worth  1 points:  passed
Test  2 (typeahead sample)
    standard output,   worth  1 points:  passed

<The variety test is similar in amount of data as the samples, but uses a variety of commands, which make a variety of errors and involve some type-ahead. If your code fails this test, a likely possibility is that it is not responding to erroneous input correctly.>
Test  3 (variety test - a variety of commands)
    standard output,   worth  1 points:  passed

<The following tests cover how your restore command works, including a series of tests in which the data file has invalid data in it in different places. Review the specs if you code fails these tests. See also the check of the saved file below.>
Test  4 (restore test)
    standard output,   worth  1 points:  passed
Test  5 (invalid data file test 1)
    standard output,   worth  1 points:  passed
Test  6 (invalid data file test 2)
    standard output,   worth  1 points:  passed
Test  7 (invalid data file test 3)
    standard output,   worth  1 points:  passed
Test  8 (invalid data file test 4)
    standard output,   worth  1 points:  passed
Test  9 (invalid data file test 5)
    standard output,   worth  1 points:  passed

<The "big data set" is for my own collection of a few hundred movies. The purpose of these tests is to see if your program can deal with a large amount of data, with lengthy titles, many collections, etc, or if it breaks down. If it does, it could be that your use of allocated memory is incorrect, so that some of the data overwrites other data or data structure.>
Test 10 (working with big data set)
    standard output,   worth  1 points:  passed
Test 11 (big data set restore test)
    standard output,   worth  1 points:  passed

      Score for Project 1 Output:  12 out of 12

<The following tests examine whether the save file produced by your program has correct content. The first test compares your programs ability to reproduce the sample save file; the second tests the save file produced during working with the big data set.>
Check of Output File Correctness
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test  0 (check normal sample save file)
    indirect output,   worth  1 points:  passed
Test  1 (check big data set saved file)
    indirect output,   worth  1 points:  passed

      Score for Project 1 Output:   2 out of  2

<In the following component tests, the autograder does multiple builds to combine components of your program with components of mine, to see if your components implement and assume the specified interface and behaviors. In these tests, your Utilities and p1_gobals module are always available in the build. Each test has two parts: compilation and standard output. If the compilation fails, it means that there is a mismatch between specifications of the modules and their interfaces. The autograder will send back the compilation/link error messages. If the standard output test fails, it means that the output of the program was incorrect, meaning that your component did not behave correctly.  The description of the test includes "array" or "list" to indicate whether the test used the array or list implementation of Ordered_container, and describes which of the above inputs were used in the standard output test.> 
Check of Project 1 Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<The first two tests use all of your code, but the array implementation to see if it behaves correctly. If your fails the above tests on these inputs, and/or the array component test below, you should not expect it to pass these.>
Test  0 (Your code (array) normal sample)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  1 (Your code (array) big data set)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed

<The next two tests combine your list and array implementations of Ordered_container with a special testing driver. If your code fails these tests, but passes most others, it is most likely due to a missing or incorrect implementation of some of the container functions that you did not test thoroughly or did not use in your own code. Note that your p1_globals and Utility are included in the build.>
Test  2 (Ordered_container test(list))
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  3 (Ordered_container test(array))
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed

<In each of the following, some of my modules are combined with yours, and the resulting whole program is tested with the variety test input used above. If your code fails the above variety test, you can expect it to fail one of more of the following, and the pattern of the failure can help isolate which module is at fault. But if your code passes the above variety test, but fails some of these, it most likely means that one of your modules is incorrect in some way, and another module is also incorrect, but compensates for the first module, so that the overall output is correct. For example, if the wrong module emits a certain message, you can get this effect. Again, the pattern of failures can help isolate the defective modules.>
Test  4 (My OC list, your others, using variety test)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  5 (My OC array, your others, using variety test)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  6 (Your list, my others, using variety test)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  7 (Your array, my others,using variety test)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  8 (My p1_main, your others(list), using variety test)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed
Test  9 (My Record, Collection, your others(list), using variety test)
    compilation,       worth  1 points:  passed
    standard output,   worth  1 points:  passed

Score for Project 1 Component Tests:  20 out of 20


chdir /y/eecs381/tmp/grade/23057_kieras

<Your total score and the bonus expressed as a proportion (0.1 = 10%) is the last result.>
Project score: 34
Bonus days: 0.1

<A copy of the files that you sent appears at the end of the message. This can be useful if you get confused as to which version you actually submitted. If you ask for help in understanding the autograder output, please copy-paste the test results instead of forwarding the complete autograder message.>
------------------------------
The files that we received are printed below.