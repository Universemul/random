1. What happens if the refresh button is used during a session implemented with
   the URL-encoding scheme?

2. What happens if the back button is used during a session implemented with
   the URL-encoding scheme?

3. Suppose user A copies a session-encoding-enhanced URL that looks interesting
   and emails it to a friend B.  Suppose B gets this email within a few
   seconds, and clicks on this URL right away.  How can you ensure that B
   establishes a new session with the server rather than being folded into
   A's session? 

4. Suppose a client decides to present cookies in a non-deterministic manner:
    when making an HTTP request, it collects all the cookies it is supposed to 
    include in the request, and then, for each, flips a coin to decide whether
    actually to send it.  Given a user log in session, what could the server do
    to keep itself from getting confused by this aberrant client behavior?

5. You have been asked to write a web server that uses cookies to implement
    sessions for clients that accept cookies, and to use URL modification for
    clients that do not.  Consider an HTTP {\sf GET} request from a brand new
    client, with no cookie included, requesting a basic (unextended) URL.  List
    the steps you will take to establish a session.  (Keep in mind that HTTP is
    asymmetric -- there is no way for the server side to initiate a transfer:
    the server has to wait for a request from the client).  

6. Session state can be maintained in a cookie, in a server-process variable (in PHP), or in
    a back-end database.  What are the advantages and drawbacks of each?


---------------------------

7. Imagine that you have a small collection of machines that need to communicate
   with each other, but not to any other machines.  They are all located in the same
   building.  What changes would you make to TCP/IP to make their network connections
   more efficient?  What is the likely performance impact if the connections are
   "HTTP-like", consisting of short-lived transfers of few bytes?  What if the connections 
   are long-lasting and transfer large amounts of data (gigabytes or more)?

8. Nagle's Algorithm is an extension to TCP that briefly delays sending small packets, in order
   to give the sending application more time to add data, yielding a better ratio of data payload
   to TCP header information.  Describe the likely behavior of Nagle's Algorithm in each of
   the following applications:
   a) Bulk one-way file transfer
   b) Video conferencing
   c) Interactive terminal
   d) HTTP, standard Web browsing
   e) Remote audio recording (a microphone sends its recording via TCP to be stored remotely)

9) Compare and contrast two scenarios:
   a) A browser user attemtps to visit a given URL, and the remote Apache server is too overloaded to read the HTTP request.
   b) A browser user attempts to visit a given URL, and the remote Apache server is overloaded.  It has enough time to read the HTTP request, but not to perform the task that the user has requested.

   In each scenario, describe what is happening on the network connection, what the client software is doing, what the server is doing, and what the user sees onscreen.  Which scenario is preferable?  Which scenario uses the network most efficiently?


