#!/usr/bin/env python
# encoding: utf-8

"""
genmakefile.py

Usage: python genmakefile.py <target_name>

Author: Gopalkrishna Sharma
Email: gopalkri@umich.edu
Webpage: http://www-personal.umich.edu/~gopalkri/
Script last updated: 15th December 2008

This script was written to generate a Makefile by parsing all C++ source
files present in the directory from which it is run. Source files are parsed
to figure out dependencies in the source code.

This script is intended for use in small projects in which all source files
are kept in a single directory. It is not intended to scale - for large projects
there are numerous existing build systems available. Use one of those.
This script was written to avoid the hassle/complexity of available systems.

As is, this script assumes that the compiler and linker are both g++. 
It also sets a few default flags that the author likes to use when debugging.
However, it is very easy to change the compiler, linker and their flags.
Below, look for the global variables CC, LD, CLFAGS, LFLAGS. Change these to
suit your needs. In addition, the generated Makefile is humanly readable and 
decently formatted. Changing flags in the Makefile itself is also a good idea.

For more information, refer to the genmakefile webpage at:
http://www-personal.umich.edu/~gopalkri/MakefileGenerator/
"""

import sys # for command line arguments
import os # for directory traversal
import re # to match #include statements

# compiler to be used in generated Makefile
CC = "g++"

# linker to be used in generated Makefile
LD = "g++"

# compiler flags to be used in generated Makefile
CFLAGS = "-ansi -pedantic -Wall -fno-elide-constructors -g -c"

# linker flags to be used in generated Makefile
LFLAGS = ""

# dictionary to map source file name to list of dependencies
dependencies = {}

# content of Makefile
Makefile = 
"""
# This Makefile was generated by genmakefile.py, a Makefile generation script.
# For more information on genmakefile.py, refer to the genmakefile webpage at:
# http://www-personal.umich.edu/~gopalkri/MakefileGenerator/
# You may also contact the author of the script by email at: gopalkri@umich.edu
"""

def main():
    """
    Entry point of script - generates Makefile.
    """
    if not len(sys.argv) == 2:
        print 'Illegal usage!'
        print 'Correct usage: python ' + sys.argv[0] + ' <target_name>'
        print 'Terminating...'
        return
    generate_headers()
    files = os.listdir('.')
    sourcefiles = []
    for filename in files:
        if filename.endswith('.cpp') or filename.endswith('.cc'):
            sourcefiles.append(filename)
    generate_objs(sourcefiles)
    generate_dependencies(sourcefiles)
    generate_clean()
    fout = open('Makefile', 'w')
    fout.writelines(Makefile)
    fout.close()

def generate_headers():
    """
    Generates Makefile headers.
    """
    global Makefile
    Makefile += ('CC = ' + CC + '\n')
    Makefile += ('LD = ' + LD + '\n\n')
    Makefile += ('CFLAGS = ' + CFLAGS + '\n')
    Makefile += ('LFLAGS = ' + LFLAGS + '\n\n')
    
def generate_objs(sourcefiles):
    """
    Generates list of object files.
    """
    global Makefile
    Makefile += 'OBJS ='
    for sourcefile in sourcefiles:
        Makefile += (' ' + remove_extension(sourcefile) + '.o')
    Makefile += '\n\n'
    Makefile += ('PROG = ' + sys.argv[1] + '\n\n')
    Makefile += ('default: $(PROG)\n\n')
    Makefile += '$(PROG): $(OBJS)\n'
    Makefile += '\t$(LD) $(LFLAGS) $(OBJS) -o $(PROG)\n\n'

def generate_dependencies(sourcefiles):
    """
    Generates all object dependencies.
    """
    global Makefile
    for sourcefile in sourcefiles:
        Makefile += (remove_extension(sourcefile) + '.o: ')
        Makefile += sourcefile
        deps = get_dependencies(sourcefile)
        for dep in deps:
            Makefile += (' ' + dep)
        print 'Analayzed source file:', sourcefile
        Makefile += '\n'
        Makefile += ('\t$(CC) $(CFLAGS) ' + sourcefile + '\n\n')

def generate_clean():
    """
    Generates clean commands.
    """
    global Makefile
    Makefile += ('clean:\n' + '\trm -rf *.o\n\n')
    Makefile += ('real_clean:\n' + '\t rm -rf *.o $(PROG)\n\n')

def get_dependencies(filename):
    """
    Returns a list of all dependencies of file named filename.
    Also adds it to global dictionary: dependencies.
    Gets dependencies recursively, with no duplicates.
    """
    global dependencies
    if filename in dependencies.keys():
        return dependencies[filename]
    ret = []
    fin = open(filename, 'r')
    lines = fin.readlines()
    fin.close()
    for line in lines:
        line = line.strip()
        if is_include_line(line):
            dep = get_dependency_from_include_line(line)
            ret.append(dep)
            deps = get_dependencies(dep)
            for dep in deps:
                ret.append(dep)
    ret = unique(ret)
    dependencies[filename] = ret
    return ret

def is_include_line(line):
    """
    Does a regular expression match of a line to check if it matches a #include.
    It will only match include lines that use "" and not <>.
    """
    return re.search(r'\s*#include\s*"[A-Za-z0-9_.]*"\s*', line)

def get_dependency_from_include_line(line):
    """
    Gets dependency from include line.
    Assumes line is an include line like #include "filename.h".
    Returns filename.h in above example.
    """
    parts = line.split('"')
    return parts[1]

def remove_extension(filename):
    """
    Strips all file extensions of filename
    """
    parts = filename.split('.')
    return parts[0]
            
def unique(lst):
    """
    Returns lst with no duplicates. Assumes all items in lst can be hashed.
    """
    ret = {}
    for item in lst:
        ret[item] = 1
    return ret.keys()

if __name__ == "__main__":
    main()